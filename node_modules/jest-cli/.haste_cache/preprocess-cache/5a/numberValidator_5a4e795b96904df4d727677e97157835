'use strict'; /*istanbul ignore next*/Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var 

numberValidator = function () {function numberValidator() {_classCallCheck(this, numberValidator);}_createClass(numberValidator, null, [{ key: 'getValidIntegerFromString', 

        /**
         * Returns an integer from a string, given a valid
         * range
         *
         * @param numString
         * @returns {*}
         */value: function getValidIntegerFromString(
        numString, rangeMin, rangeMax) {

            var number = false;

            if (numberValidator.isInteger(numString)) {

                var _number = parseInt(numString);

                if (_number >= rangeMin && _number <= rangeMax) {
                    return _number;}}



            return number;}


        /**
         * Checks whether a string is an integer and
         * doesn't have leading zeros. We check for
         * leading zeros as parseInt will convert
         * a string with leading zeros but for this
         * app we've chosen to not accept them
         *
         * @param number
         * @returns {boolean}
         */ }, { key: 'isInteger', value: function isInteger(
        number) {

            var leadingZerosRegex = /^0[0-9].*$/;
            var intRegex = /^\d+$/;

            if (intRegex.test(number) && !leadingZerosRegex.test(number)) {
                return true;}


            return false;} }]);return numberValidator;}(); /*istanbul ignore next*/exports.default = 




numberValidator;